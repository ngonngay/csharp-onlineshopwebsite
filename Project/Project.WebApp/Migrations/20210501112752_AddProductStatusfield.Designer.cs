// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data.EF;

namespace Project.WebApp.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20210501112752_AddProductStatusfield")]
    partial class AddProductStatusfield
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8D04DCE3-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "aa128821-097a-4ef4-841f-08937403845d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8D04DCE2-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "d0e5d2ba-4526-4db6-8a73-46c4001d88ba",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "8D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "496faea3-5ec4-44c1-b9df-25ec46708b57",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "1D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "e8f82251-9f09-4867-86af-e35e6ffbbec0",
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "permission",
                            ClaimValue = "manage.user",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE2-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSignIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 5, 1, 18, 27, 50, 243, DateTimeKind.Local).AddTicks(7689));

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("disable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 317, DateTimeKind.Local).AddTicks(2231),
                            ConcurrencyStamp = "2314d19d-7ea3-42bc-9a90-41eaa77ebc89",
                            Email = "rawaccountcustomer0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer0@gmail.com",
                            NormalizedUserName = "raw-account-customer0",
                            PasswordHash = "AQAAAAEAACcQAAAAEHQXQ6warT5l78CrZy/IsVtudl5bNPsiV7r3zc7zGDZI8+SdZY4RlK92Z6vVg07/ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer0",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 332, DateTimeKind.Local).AddTicks(96),
                            ConcurrencyStamp = "d3145b7f-7eaf-4599-87ba-062889a7cb91",
                            Email = "rawaccountcustomer1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer1@gmail.com",
                            NormalizedUserName = "raw-account-customer1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAwL2NTwrHwgWZVboRDjaz0jEYb9qELfTIGgLKdbweGbwxd+vxg/ow5HvcTUY/CSiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer1",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 344, DateTimeKind.Local).AddTicks(5686),
                            ConcurrencyStamp = "df6835ba-52d2-44c9-ac0f-1bb0c16c4f10",
                            Email = "rawaccountcustomer2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer2@gmail.com",
                            NormalizedUserName = "raw-account-customer2",
                            PasswordHash = "AQAAAAEAACcQAAAAEDq60eL3WIOrANkrHHSpn3Z7JW0YvZs3u08JW+s2BHkesj6Ot6elfD581BMfjqwyWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer2",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 358, DateTimeKind.Local).AddTicks(3246),
                            ConcurrencyStamp = "05072bc6-0325-4d2e-89d1-6022deb4330c",
                            Email = "rawaccountcustomer3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer3@gmail.com",
                            NormalizedUserName = "raw-account-customer3",
                            PasswordHash = "AQAAAAEAACcQAAAAELSr/DItizZ13wgmw+2uGBEB9fuWopg973lKEaEhZvCMCuEetujh6+g6VU5cPswopg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer3",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 372, DateTimeKind.Local).AddTicks(1263),
                            ConcurrencyStamp = "6d1a2da9-2798-44bd-923d-c495cef42f26",
                            Email = "rawaccountcustomer4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer4@gmail.com",
                            NormalizedUserName = "raw-account-customer4",
                            PasswordHash = "AQAAAAEAACcQAAAAENgZzmYgmjPQ7sxVFDm1xcBoZtXMKyVyzuXgHDWLcgmfugQr7QftIeNXtXtnirU+mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer4",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 385, DateTimeKind.Local).AddTicks(2865),
                            ConcurrencyStamp = "2824da54-4465-43f5-ac6d-bf303dddb66e",
                            Email = "rawaccountcustomer5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer5@gmail.com",
                            NormalizedUserName = "raw-account-customer5",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQLNuhi3PP9u3Aiwh2US19rl1JINWNwYi18HNpS+Xfv/jYtMfV7RxYgpp7RotjShg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer5",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 399, DateTimeKind.Local).AddTicks(7497),
                            ConcurrencyStamp = "05cf88ea-e748-4b25-8dd1-e4c09a3bd2c5",
                            Email = "rawaccountcustomer6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer6@gmail.com",
                            NormalizedUserName = "raw-account-customer6",
                            PasswordHash = "AQAAAAEAACcQAAAAELXmH7hQE/5OkkeMPD0aDxJRZxDhL6/0ktnGQ6/4aySITgfe0qpF3Z2wFeRIEOAobQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer6",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 412, DateTimeKind.Local).AddTicks(9036),
                            ConcurrencyStamp = "4a23a331-5e9c-4e9f-9e62-ea634a01113e",
                            Email = "rawaccountcustomer7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer7@gmail.com",
                            NormalizedUserName = "raw-account-customer7",
                            PasswordHash = "AQAAAAEAACcQAAAAEKyZ7aiX4E6vUTu+hLrK7LJFORTGeY/YS4ZmxgGCM8gd2xuHRIfLo6TsflQnmwJ2YA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer7",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 426, DateTimeKind.Local).AddTicks(6525),
                            ConcurrencyStamp = "79893086-876f-4aff-acb8-26a9744c979d",
                            Email = "rawaccountcustomer8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer8@gmail.com",
                            NormalizedUserName = "raw-account-customer8",
                            PasswordHash = "AQAAAAEAACcQAAAAECtZwnUqXLmujFJeQO2tbpt0zvlo0x/Vz7679eWNmXKtikFz85CHlp6/yRqqiz/JyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer8",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 440, DateTimeKind.Local).AddTicks(6880),
                            ConcurrencyStamp = "fb4f6222-5d9a-43ca-ba7f-3ff638997992",
                            Email = "rawaccountcustomer9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer9@gmail.com",
                            NormalizedUserName = "raw-account-customer9",
                            PasswordHash = "AQAAAAEAACcQAAAAEIBzS+0wXjs6ivGW0yl9jGt1vyuNBbeCm/hNx3b7tIcqZkeycwg3y2ZWUNnL85I2Kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer9",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 452, DateTimeKind.Local).AddTicks(3191),
                            ConcurrencyStamp = "69baf493-22ca-4e99-a72a-a468108885b3",
                            Email = "rawaccountstaff0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff0@gmail.com",
                            NormalizedUserName = "raw-account-staff0",
                            PasswordHash = "AQAAAAEAACcQAAAAEGJfSFlPsmUnfOc+lPZd0h6t+q3HV8tgOr7Qit+zBteChyKk1e8xYX7Y+abwvJyQ8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff0",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 464, DateTimeKind.Local).AddTicks(7550),
                            ConcurrencyStamp = "ea0278c9-ac23-4d0d-98d9-6aeaf75d0d5f",
                            Email = "rawaccountstaff1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff1@gmail.com",
                            NormalizedUserName = "raw-account-staff1",
                            PasswordHash = "AQAAAAEAACcQAAAAENTV9Dla/GbKqC44XbfRSrXGHmhA6wauJd6DCJSUQXr9XNwGSAX8zcaKAnPuWNUTQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff1",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 477, DateTimeKind.Local).AddTicks(930),
                            ConcurrencyStamp = "3d4843d3-e700-4490-a850-fe1d4c7049b8",
                            Email = "rawaccountstaff2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff2@gmail.com",
                            NormalizedUserName = "raw-account-staff2",
                            PasswordHash = "AQAAAAEAACcQAAAAEP+4X5NmQbCknY6qnas1OnJinyMPE0iPdN4b6YiDpGeblMn9TpIpO8g2r6JkcjP3eQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff2",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 490, DateTimeKind.Local).AddTicks(2427),
                            ConcurrencyStamp = "99099aa4-dbf8-46ef-997a-4b40076cb385",
                            Email = "rawaccountstaff3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff3@gmail.com",
                            NormalizedUserName = "raw-account-staff3",
                            PasswordHash = "AQAAAAEAACcQAAAAEOnauWFkCZqBTuRakT2aNrBww1OJZui233mX0yCrfXrLTUpiK1IXBF59USp1q5K8gQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff3",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 502, DateTimeKind.Local).AddTicks(1342),
                            ConcurrencyStamp = "03e1bc75-4e24-4227-982f-02f799951972",
                            Email = "rawaccountstaff4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff4@gmail.com",
                            NormalizedUserName = "raw-account-staff4",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6NvOvI8TuLFtT5Yen9v4zJHCh2H8KtKMStf7SUB9zG4MOaqUnnlBlLo1aJ5xbqnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff4",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 514, DateTimeKind.Local).AddTicks(6367),
                            ConcurrencyStamp = "5d94d820-d57f-4e55-bbb7-6df4fd79e323",
                            Email = "rawaccountstaff5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff5@gmail.com",
                            NormalizedUserName = "raw-account-staff5",
                            PasswordHash = "AQAAAAEAACcQAAAAEIeBpF85qpaZiqB4ju4fhNOrseaL5MiRoYh/l/+l7T8oeZEggJGF8GmWkrDIXkcAMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff5",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 529, DateTimeKind.Local).AddTicks(6120),
                            ConcurrencyStamp = "2347f53d-2a87-4ad3-9524-2d8eb4dbb378",
                            Email = "rawaccountstaff6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff6@gmail.com",
                            NormalizedUserName = "raw-account-staff6",
                            PasswordHash = "AQAAAAEAACcQAAAAEPWubSulWfBZ/b5g4nontQLOr1rd5X+6YhF0Rsv1Lw6Xe9OfrSmNPt+y9gAJ0FkXRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff6",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 544, DateTimeKind.Local).AddTicks(7554),
                            ConcurrencyStamp = "c60be9bb-5d69-43ec-86b7-e596de3a1cd4",
                            Email = "rawaccountstaff7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff7@gmail.com",
                            NormalizedUserName = "raw-account-staff7",
                            PasswordHash = "AQAAAAEAACcQAAAAEKd1dziyMZW0ip21ilVXKYZg/jV0yqbO2VBTEeL/wE56EWxgLUwphW9S04NovJG5FQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff7",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 561, DateTimeKind.Local).AddTicks(5806),
                            ConcurrencyStamp = "33b505b6-51b5-4217-aeaf-0ea8184669e4",
                            Email = "rawaccountstaff8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff8@gmail.com",
                            NormalizedUserName = "raw-account-staff8",
                            PasswordHash = "AQAAAAEAACcQAAAAEDvEmjBymgzEBB0IHbraHP08hIWzvXq1930Y6nBdqWIAxWVlbFbvst6V8+AZTjWE0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff8",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 576, DateTimeKind.Local).AddTicks(4955),
                            ConcurrencyStamp = "488a4e74-464f-4a89-ba9f-76b9cc4a0cf1",
                            Email = "rawaccountstaff9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff9@gmail.com",
                            NormalizedUserName = "raw-account-staff9",
                            PasswordHash = "AQAAAAEAACcQAAAAEP1DX2U6/tqYabsrEWImJfuV6ihebD6um+gIZITdrnCPdv7f+o/IhfrWKGIQfxDEXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff9",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 590, DateTimeKind.Local).AddTicks(2499),
                            ConcurrencyStamp = "5295f797-a7ea-4633-bae5-0640c80334e1",
                            Email = "thangnguyenquyetvlth@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEM8dZNRGe2xWUi9kdB/951sNqwdvLMrO1nGdKNV0AMZiyHezLQ6KG0pjxDB+lEO6Yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Thang-dev",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 601, DateTimeKind.Local).AddTicks(8727),
                            ConcurrencyStamp = "237d984c-f74d-4d78-bf3b-224cf027c12b",
                            Email = "thangnguyenquyetvlth1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth1@gmail.com",
                            NormalizedUserName = "raw-account1",
                            PasswordHash = "AQAAAAEAACcQAAAAEAJOGcfxvKkoNRxK8ygECEwwAM1UYoQ93TgNFeaWu6MnWpcdSjw/dekDpyY1v25QHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account1",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD712F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 610, DateTimeKind.Local).AddTicks(6736),
                            ConcurrencyStamp = "ffcad5bc-620b-41fb-9c88-700796552a6f",
                            Email = "thangnguyenquyetvlth2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth2@gmail.com",
                            NormalizedUserName = "raw-account2",
                            PasswordHash = "AQAAAAEAACcQAAAAEI3u+jHVLxJO2lLy5klWiwzh8wy8mVYhqVjhfFG3dlvhtMJZe1PdeJCN3YN3k4HLLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account2",
                            disable = false
                        },
                        new
                        {
                            Id = "61BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 621, DateTimeKind.Local).AddTicks(2647),
                            ConcurrencyStamp = "a9431637-5221-4471-8223-d44e114fb604",
                            Email = "thangnguyenquyetvlth3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth3@gmail.com",
                            NormalizedUserName = "raw-account3",
                            PasswordHash = "AQAAAAEAACcQAAAAEP4/NZ9s7zOoFA1Hb2/3mPKL6MKFkC2P+arnuhwg5QyvKNvckO+eZgzr4H5eigq9zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account3",
                            disable = false
                        },
                        new
                        {
                            Id = "19BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 629, DateTimeKind.Local).AddTicks(2292),
                            ConcurrencyStamp = "6e6df6e3-dd0d-4ab8-8258-e7dff4335a32",
                            Email = "thangnguyenquyetvlth4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth4@gmail.com",
                            NormalizedUserName = "raw-account4",
                            PasswordHash = "AQAAAAEAACcQAAAAEDb7hO+MC9J6CTojXlqGguwpVfPmFh11WmYAMqPDljQZHXRRiWNtunlkkKWKTNkFEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account4",
                            disable = false
                        },
                        new
                        {
                            Id = "65BD710F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 638, DateTimeKind.Local).AddTicks(8641),
                            ConcurrencyStamp = "c444d467-0d8e-45fe-942d-6cffa82a2e15",
                            Email = "thangnguyenquyetvlth5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth5@gmail.com",
                            NormalizedUserName = "raw-account5",
                            PasswordHash = "AQAAAAEAACcQAAAAEOSLnyf8XHlUlJtWpf2TbnT0sZDBkVlvx2YHHFuaFeo4UJZWEJn9EyyLv2me2ADcWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account5",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B6-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 649, DateTimeKind.Local).AddTicks(2770),
                            ConcurrencyStamp = "cbf5fbf2-a72a-4296-9916-6eb3a6681bc9",
                            Email = "thangnguyenquyetvlth6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth6@gmail.com",
                            NormalizedUserName = "raw-account6",
                            PasswordHash = "AQAAAAEAACcQAAAAECOR/lSug8A/SwO+py/qpRwrIpjBS8uy3AndvNJtHgkSEo6oA4FQaG9qLyp53kjbQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account6",
                            disable = false
                        },
                        new
                        {
                            Id = "09BD714F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 658, DateTimeKind.Local).AddTicks(4786),
                            ConcurrencyStamp = "b988aead-95ea-4909-8705-e50c9166219a",
                            Email = "thangnguyenquyetvlth7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth7@gmail.com",
                            NormalizedUserName = "raw-account7",
                            PasswordHash = "AQAAAAEAACcQAAAAEDNQev0Jk48Py9MtinG51aDoyartAUuappONQ/N8mxEPgxaES3o9YxUIl8IcSSpNTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account7",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD114F-9576-45BA-B4B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 27, 50, 668, DateTimeKind.Local).AddTicks(349),
                            ConcurrencyStamp = "12add973-1b11-4dab-b8ee-994569d878da",
                            Email = "thangnguyenquyetvlth8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth8@gmail.com",
                            NormalizedUserName = "raw-account8",
                            PasswordHash = "AQAAAAEAACcQAAAAEOEQudMoaoD9x/H2PRhYju2WxmtrFw7LwrcUy6Q9ECRsoXLXsv27o1RQ8LcZ3x9cOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account8",
                            disable = false
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nữ",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nam",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = false,
                            Name = "Áo nam",
                            SortOrder = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("sold")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 1, 18, 27, 50, 296, DateTimeKind.Local).AddTicks(8405),
                            Description = "99% Cotton, 1% Elastane . Bền Vững Khi Giặt Máy . Skinny Ôm Sát Và Tôn Lên Những Đường Nét Quyến Rũ Của Bạn",
                            Name = "SKINNY",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0,
                            status = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 1, 18, 27, 50, 297, DateTimeKind.Local).AddTicks(3229),
                            Description = "100% Cotton . Sản Phẩm Mang Đậm Phong Cách Cá Tính Và Không Kém Phần Quyến Rũ. Orginal Được Thiết Kế Để Có Thể Ôm Sát Vòng Ba Và Tôn Lên Làn Da Của Bạn",
                            Name = "ORGINAL SHORT",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0,
                            status = 0
                        },
                        new
                        {
                            Id = -1,
                            DateCreated = new DateTime(2021, 5, 1, 18, 27, 50, 297, DateTimeKind.Local).AddTicks(3246),
                            Description = "100% Cotton . TOPS Với Thiết Kế Cạp Cao Sẽ Mang Lại Cho Bạn Cảm Giác Tự tin , Thích Hợp Để Phối Với Những Dạng Áo ONTOP cá tính",
                            Name = "TOPS",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0,
                            status = 0
                        },
                        new
                        {
                            Id = -2,
                            DateCreated = new DateTime(2021, 5, 1, 18, 27, 50, 297, DateTimeKind.Local).AddTicks(3250),
                            Description = "Vâng , Đúng Như Cái Tên Của Nó, BoyFriend Sẽ Là Người Bạn Đồng Hành Của Bạn Trong Mọi Thời Điểm Của Cuộc Sống, BOYFRIEND Được Thiết Kết Để Tạo Cho Bạn Cảm Giác Thoải Mái, Sang Trọng Và An Toàn",
                            Name = "BOYFRIEND",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0,
                            status = 0
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("Project.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
