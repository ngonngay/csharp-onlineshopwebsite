// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data.EF;

namespace Project.WebApp.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20210501114228_FixProductStatusfield")]
    partial class FixProductStatusfield
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8D04DCE3-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "98f90514-ce95-4a11-a54d-c895e94b7f94",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8D04DCE2-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "4a916f7b-6203-4a9c-bcc8-117dc08b8a29",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "8D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "b426ef6b-bd91-41b1-8e6f-4c1a6d1f050b",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "1D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "b6f3b04f-b73a-4f24-a3f4-822643006153",
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "permission",
                            ClaimValue = "manage.user",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE2-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSignIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 5, 1, 18, 42, 26, 947, DateTimeKind.Local).AddTicks(9));

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("disable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 3, DateTimeKind.Local).AddTicks(1113),
                            ConcurrencyStamp = "ea5c8956-413e-4b59-8618-cfaeb7ab9762",
                            Email = "rawaccountcustomer0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer0@gmail.com",
                            NormalizedUserName = "raw-account-customer0",
                            PasswordHash = "AQAAAAEAACcQAAAAEER38xjFATysBFQzX7I/ZyxW1e54h6Dk5MviVpTFEgyquHg0956YDdeogQDKSqLj6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer0",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 13, DateTimeKind.Local).AddTicks(1862),
                            ConcurrencyStamp = "588d3ebd-b261-40e9-88ea-6058257a3ee5",
                            Email = "rawaccountcustomer1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer1@gmail.com",
                            NormalizedUserName = "raw-account-customer1",
                            PasswordHash = "AQAAAAEAACcQAAAAEIpA+vHa6j1G8nfTL9lEAaH9mjBtMbW2kVKc7U3uXUYqnK7nSCc4SB/LtPGcG3D9qQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer1",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 26, DateTimeKind.Local).AddTicks(8577),
                            ConcurrencyStamp = "82a1595b-7a5a-4eef-b87c-7c9a564f11a5",
                            Email = "rawaccountcustomer2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer2@gmail.com",
                            NormalizedUserName = "raw-account-customer2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHkH/gDvaK0UH/g1MZSAYvh1IgcuCC8x57DxLFa9i7FFK9f6WMseinajAl4/xfLfsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer2",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 37, DateTimeKind.Local).AddTicks(4523),
                            ConcurrencyStamp = "e81e246e-7ac2-42c9-ac16-32483711805e",
                            Email = "rawaccountcustomer3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer3@gmail.com",
                            NormalizedUserName = "raw-account-customer3",
                            PasswordHash = "AQAAAAEAACcQAAAAEO7dja27zvoye+VA6/QoNVDS6xK+8UDvZOCMT4GgrOpM9lQ3TZboD9a22enRk1gIEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer3",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 50, DateTimeKind.Local).AddTicks(9630),
                            ConcurrencyStamp = "62885959-c606-442b-8371-71e7e968473d",
                            Email = "rawaccountcustomer4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer4@gmail.com",
                            NormalizedUserName = "raw-account-customer4",
                            PasswordHash = "AQAAAAEAACcQAAAAEPpny70JPnT5cNjb7tKeW0UdJds/Z+iziCBUqVPGobH0dmy3eXMeuakn/JGkixXFmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer4",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 61, DateTimeKind.Local).AddTicks(3980),
                            ConcurrencyStamp = "0ccaff57-efaf-4652-8578-f27f90c491a3",
                            Email = "rawaccountcustomer5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer5@gmail.com",
                            NormalizedUserName = "raw-account-customer5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAM25RWQigmjcApcZGBLG0/GNX8PQqesixTmrfHi6YxA7p3qymkUwya4DZWtEH2cTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer5",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 73, DateTimeKind.Local).AddTicks(1007),
                            ConcurrencyStamp = "1e7e5679-b3f2-4dca-a86b-cc202fe3e036",
                            Email = "rawaccountcustomer6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer6@gmail.com",
                            NormalizedUserName = "raw-account-customer6",
                            PasswordHash = "AQAAAAEAACcQAAAAEJeamX57H9XqWQpkCwIo1XWh61CPco+TVo8EdvWVV6DiH++bYc/mXa0/uhgOXa1svg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer6",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 82, DateTimeKind.Local).AddTicks(372),
                            ConcurrencyStamp = "95c9d14b-6d72-4d32-b887-44f1978a7429",
                            Email = "rawaccountcustomer7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer7@gmail.com",
                            NormalizedUserName = "raw-account-customer7",
                            PasswordHash = "AQAAAAEAACcQAAAAEKMJayDKwFsGPUU3vGkr2g0lmaP83OnlbeSBQrVZr8dbNbEc6mf4C3IEsHTMlOvBNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer7",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 93, DateTimeKind.Local).AddTicks(8523),
                            ConcurrencyStamp = "d5fa7ecd-5ea0-46db-aced-266451f65682",
                            Email = "rawaccountcustomer8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer8@gmail.com",
                            NormalizedUserName = "raw-account-customer8",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJDq/8UN0UCUV94D0QbEOCVfd/9UFEhr+YfGTLGIqJh5BpOXWhQOV4/Ix7Dbed7YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer8",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 103, DateTimeKind.Local).AddTicks(9408),
                            ConcurrencyStamp = "b1129147-0316-42d3-b66c-41474d7f85e1",
                            Email = "rawaccountcustomer9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer9@gmail.com",
                            NormalizedUserName = "raw-account-customer9",
                            PasswordHash = "AQAAAAEAACcQAAAAENoZSbxL+oCNKABAp+a1ZfOpJ74ZXzh/lomWh9YGGnXPDsku6uhcbV/qm9Oh8CBy+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer9",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 117, DateTimeKind.Local).AddTicks(2115),
                            ConcurrencyStamp = "954b4251-e11f-4e90-8a78-849a612c7e9b",
                            Email = "rawaccountstaff0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff0@gmail.com",
                            NormalizedUserName = "raw-account-staff0",
                            PasswordHash = "AQAAAAEAACcQAAAAEMah9C5a5APXQXO3z8FzG9qjukz4wE+y0Alun1ZGHXbfmShrHlTY0KcjgfRsyDuVqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff0",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 130, DateTimeKind.Local).AddTicks(1370),
                            ConcurrencyStamp = "3fc37ed0-9db4-4e61-8e9a-ae8e29586785",
                            Email = "rawaccountstaff1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff1@gmail.com",
                            NormalizedUserName = "raw-account-staff1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGMOYmcVRlAQJSjcB/uRVJRwxfThY0y3tZRGIi5Vhvl0nT2vKystmOG2Yl1fhjoKfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff1",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 141, DateTimeKind.Local).AddTicks(6478),
                            ConcurrencyStamp = "b401d6c7-44bf-4c34-a777-143e3b00238f",
                            Email = "rawaccountstaff2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff2@gmail.com",
                            NormalizedUserName = "raw-account-staff2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPDBLIQOxHzQ2z1/rqppi1YfCyKCTzLvgsUxgJj9El3K10NIjxZuQPlhYnLpzv654Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff2",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 153, DateTimeKind.Local).AddTicks(4100),
                            ConcurrencyStamp = "ef11980a-2111-4a52-bf41-c038b950965b",
                            Email = "rawaccountstaff3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff3@gmail.com",
                            NormalizedUserName = "raw-account-staff3",
                            PasswordHash = "AQAAAAEAACcQAAAAECcSoXBWZfqEZPQExEUVhILth7OIi1P/xKCJtt77DIQ01G89TwCz6v4szXt4t8Pu7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff3",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 165, DateTimeKind.Local).AddTicks(2805),
                            ConcurrencyStamp = "378c988f-2b84-4aa5-8ef1-3cf21d5e30b6",
                            Email = "rawaccountstaff4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff4@gmail.com",
                            NormalizedUserName = "raw-account-staff4",
                            PasswordHash = "AQAAAAEAACcQAAAAEKhWmJ3g91pdVLpsL7pk0mvPTiUA5newDKJvIBI2Wo/a5n8KHXoIoMJZNoM0S0lxZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff4",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 178, DateTimeKind.Local).AddTicks(4780),
                            ConcurrencyStamp = "d2e853b4-9c00-47cc-89ad-9dc056508c35",
                            Email = "rawaccountstaff5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff5@gmail.com",
                            NormalizedUserName = "raw-account-staff5",
                            PasswordHash = "AQAAAAEAACcQAAAAEItna3wTcox++VnJciv1/gc1vK70ei4+EDuEX3NjoILMo6/5OhircDxKdtybVBoseA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff5",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 191, DateTimeKind.Local).AddTicks(6059),
                            ConcurrencyStamp = "ca992b1a-f309-4fe2-b942-a1c3917118ef",
                            Email = "rawaccountstaff6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff6@gmail.com",
                            NormalizedUserName = "raw-account-staff6",
                            PasswordHash = "AQAAAAEAACcQAAAAENpEHKliFTdda4d6wPz4bL2K2N9DcbkGBedEsdsCJiRkYpBlhCxFBH0KB4AVOZPAuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff6",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 204, DateTimeKind.Local).AddTicks(5319),
                            ConcurrencyStamp = "3df13ec2-f7c2-4bab-b0d5-57bbb0ef3e84",
                            Email = "rawaccountstaff7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff7@gmail.com",
                            NormalizedUserName = "raw-account-staff7",
                            PasswordHash = "AQAAAAEAACcQAAAAEH4f3wWIR+C8jcwRMlD3SdNaQYRY1e8UyLf/JnPbJMz/P+JpMOzDnRHS+86naV/Qag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff7",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 217, DateTimeKind.Local).AddTicks(5616),
                            ConcurrencyStamp = "bfa34620-b747-45ab-8c43-33445d68b938",
                            Email = "rawaccountstaff8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff8@gmail.com",
                            NormalizedUserName = "raw-account-staff8",
                            PasswordHash = "AQAAAAEAACcQAAAAECv+cYpgwf2GMyiMsIJj3Ygq4YRrkLR5ZBBaZPXbLq5l/K2wUuDvW3dcvN5pvyEhdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff8",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 231, DateTimeKind.Local).AddTicks(513),
                            ConcurrencyStamp = "fcfba331-6da3-48ec-903d-3462f889924a",
                            Email = "rawaccountstaff9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff9@gmail.com",
                            NormalizedUserName = "raw-account-staff9",
                            PasswordHash = "AQAAAAEAACcQAAAAEIY6arTfuTGrv7pBZ3c0293ZKv/6+jnEcOgYgECmx5zHK8AET8V8bOsShq70Mv/ENw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff9",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 242, DateTimeKind.Local).AddTicks(7514),
                            ConcurrencyStamp = "5e6279b3-d6a7-4eca-b086-5e40d70ce8f1",
                            Email = "thangnguyenquyetvlth@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEOAIQ3+AHtZGoasDTHXejYmb/1V0mtb1KbYlCrONJIVo5YWDiPIwgp8LZ5oc9F24tQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Thang-dev",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 256, DateTimeKind.Local).AddTicks(64),
                            ConcurrencyStamp = "bbe45d36-1a38-472a-9346-69e0fb770f08",
                            Email = "thangnguyenquyetvlth1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth1@gmail.com",
                            NormalizedUserName = "raw-account1",
                            PasswordHash = "AQAAAAEAACcQAAAAEOjF7Oxj3pAjCOY/Bve5kTg0w0At2eUjMBWyvTbYgnaPLBDsfxRPWUt35pvY5UnriQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account1",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD712F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 269, DateTimeKind.Local).AddTicks(5395),
                            ConcurrencyStamp = "8e757f67-e470-4b7f-a9a7-27d85ffb5115",
                            Email = "thangnguyenquyetvlth2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth2@gmail.com",
                            NormalizedUserName = "raw-account2",
                            PasswordHash = "AQAAAAEAACcQAAAAENZ+/jLwWTbAE97MRjeUAD4wlXYFGHdRHEd+Jp0k+BF/2sZou9E3ttYaeRzxN9LVyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account2",
                            disable = false
                        },
                        new
                        {
                            Id = "61BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 282, DateTimeKind.Local).AddTicks(4403),
                            ConcurrencyStamp = "fb439493-99b6-42fc-ac39-90dd6fde932b",
                            Email = "thangnguyenquyetvlth3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth3@gmail.com",
                            NormalizedUserName = "raw-account3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPUAXUwaS6k6YLEhczJs4gOBaSMNrh88Vh8+6VwncNbeXBZvNTp6q1/vwBSnSdxXgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account3",
                            disable = false
                        },
                        new
                        {
                            Id = "19BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 293, DateTimeKind.Local).AddTicks(2046),
                            ConcurrencyStamp = "3e2419ac-46db-4c62-b9fe-432924a42b4d",
                            Email = "thangnguyenquyetvlth4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth4@gmail.com",
                            NormalizedUserName = "raw-account4",
                            PasswordHash = "AQAAAAEAACcQAAAAEKhlXYoe2Jg+rrVsbiMjAKxxqkgg8MJpFZAJt9Xd7got64EPyAD9eHulL5NsP7QW6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account4",
                            disable = false
                        },
                        new
                        {
                            Id = "65BD710F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 301, DateTimeKind.Local).AddTicks(4449),
                            ConcurrencyStamp = "c66f4684-1be4-4eac-96e5-619303338977",
                            Email = "thangnguyenquyetvlth5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth5@gmail.com",
                            NormalizedUserName = "raw-account5",
                            PasswordHash = "AQAAAAEAACcQAAAAEMufIeK8obmxXLIKYwPqVLVTAXtSQ2P2LQxUND/umiu8nlDK2NV/yNQVtUoUG7edkg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account5",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B6-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 310, DateTimeKind.Local).AddTicks(1685),
                            ConcurrencyStamp = "be12abda-0dda-4839-93fe-deb66a8cc92d",
                            Email = "thangnguyenquyetvlth6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth6@gmail.com",
                            NormalizedUserName = "raw-account6",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvsVEU8WZjGksmkM7WdzoFvPpusQhi+cCT3vGZ3bBIrAzImd9aRRbNZMqJs/rr7Lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account6",
                            disable = false
                        },
                        new
                        {
                            Id = "09BD714F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 320, DateTimeKind.Local).AddTicks(7238),
                            ConcurrencyStamp = "aee6d9e4-c33e-4400-bd1e-1817d9f1b815",
                            Email = "thangnguyenquyetvlth7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth7@gmail.com",
                            NormalizedUserName = "raw-account7",
                            PasswordHash = "AQAAAAEAACcQAAAAEDjg5jSMq1JK9CiFSDW+xXsUooCaiTBN79+DuFv9E2yYuqZBKjYxwxrRRzs+uBmF3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account7",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD114F-9576-45BA-B4B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 5, 1, 18, 42, 27, 330, DateTimeKind.Local).AddTicks(8357),
                            ConcurrencyStamp = "6e45f3fe-7181-4fba-b527-279adcbb5023",
                            Email = "thangnguyenquyetvlth8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth8@gmail.com",
                            NormalizedUserName = "raw-account8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGesioZG4RxzWn8VB1sAhTjzpTX+ENtVqnTyX2FuGj4bn6WJxit9Q14ebDaGpEO1ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account8",
                            disable = false
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nữ",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nam",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = false,
                            Name = "Áo nam",
                            SortOrder = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("productStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("sold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 5, 1, 18, 42, 26, 986, DateTimeKind.Local).AddTicks(7578),
                            Description = "99% Cotton, 1% Elastane . Bền Vững Khi Giặt Máy . Skinny Ôm Sát Và Tôn Lên Những Đường Nét Quyến Rũ Của Bạn",
                            Name = "SKINNY",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 5, 1, 18, 42, 26, 987, DateTimeKind.Local).AddTicks(2369),
                            Description = "100% Cotton . Sản Phẩm Mang Đậm Phong Cách Cá Tính Và Không Kém Phần Quyến Rũ. Orginal Được Thiết Kế Để Có Thể Ôm Sát Vòng Ba Và Tôn Lên Làn Da Của Bạn",
                            Name = "ORGINAL SHORT",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = -1,
                            DateCreated = new DateTime(2021, 5, 1, 18, 42, 26, 987, DateTimeKind.Local).AddTicks(2395),
                            Description = "100% Cotton . TOPS Với Thiết Kế Cạp Cao Sẽ Mang Lại Cho Bạn Cảm Giác Tự tin , Thích Hợp Để Phối Với Những Dạng Áo ONTOP cá tính",
                            Name = "TOPS",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = -2,
                            DateCreated = new DateTime(2021, 5, 1, 18, 42, 26, 987, DateTimeKind.Local).AddTicks(2400),
                            Description = "Vâng , Đúng Như Cái Tên Của Nó, BoyFriend Sẽ Là Người Bạn Đồng Hành Của Bạn Trong Mọi Thời Điểm Của Cuộc Sống, BOYFRIEND Được Thiết Kết Để Tạo Cho Bạn Cảm Giác Thoải Mái, Sang Trọng Và An Toàn",
                            Name = "BOYFRIEND",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            productStatus = 0,
                            sold = 0
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("Project.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
