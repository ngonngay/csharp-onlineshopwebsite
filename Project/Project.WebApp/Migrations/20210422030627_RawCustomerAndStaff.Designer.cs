// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data.EF;

namespace Project.WebApp.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20210422030627_RawCustomerAndStaff")]
    partial class RawCustomerAndStaff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8D04DCE3-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "19f9f28f-4c0d-418b-8fe0-1a2df2735d0e",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8D04DCE2-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "855d7d21-32ce-4a6e-90b0-b258bfc63fac",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "8D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "aa420699-4c75-4413-8cb0-d6d8dff73ab0",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "1D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "fee95fb6-85bd-45e0-9b52-ecc0585cd74e",
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "permission",
                            ClaimValue = "manage.user",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE2-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("disable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 429, DateTimeKind.Local).AddTicks(2902),
                            ConcurrencyStamp = "6b290b2d-065a-412d-9d6a-bd525649958b",
                            Email = "rawaccountcustomer0@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer0@gmail.com",
                            NormalizedUserName = "raw-account-customer0",
                            PasswordHash = "AQAAAAEAACcQAAAAEOi8m1pmaJdJFz0t7ErerqI76UJVgi+jb+8pD0quFs7lQUc3W8XFj9zNlAYwpgZ5zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer0",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 438, DateTimeKind.Local).AddTicks(7297),
                            ConcurrencyStamp = "3bf0fc88-0b21-47ef-bfda-89e9a2f501c1",
                            Email = "rawaccountcustomer1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer1@gmail.com",
                            NormalizedUserName = "raw-account-customer1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEwtkuJC0Mp+BPTMY2SDAYUsMb5hswh0FlcIUqX9YAiMXmRpsE2GNjvzTsDg0oGbxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer1",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 447, DateTimeKind.Local).AddTicks(689),
                            ConcurrencyStamp = "c1579171-678e-473e-86eb-43d8288e9089",
                            Email = "rawaccountcustomer2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer2@gmail.com",
                            NormalizedUserName = "raw-account-customer2",
                            PasswordHash = "AQAAAAEAACcQAAAAEMylsi9+jMpUOOuH7WN/DHVonUdeKnlhH47VpWqqN2EArggZL3rvodUw8DkxsK8S/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer2",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 454, DateTimeKind.Local).AddTicks(9830),
                            ConcurrencyStamp = "ef2511fc-de17-42f9-9e78-06472bb3967b",
                            Email = "rawaccountcustomer3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer3@gmail.com",
                            NormalizedUserName = "raw-account-customer3",
                            PasswordHash = "AQAAAAEAACcQAAAAEAypkgw5qfyiLQbpOW1a4IVeP4pgmkpjnq1d08AKU12x0eONZ1f4rTngqJQ7Qfc0YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer3",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 463, DateTimeKind.Local).AddTicks(7756),
                            ConcurrencyStamp = "025867af-5b91-4be4-bb9e-fd5427c9bc94",
                            Email = "rawaccountcustomer4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer4@gmail.com",
                            NormalizedUserName = "raw-account-customer4",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/A/hIv2TARLl3Weeqkuiyd207V0rptWXKJWEyK+vLwj/ieEWAbeiY8PjSwdo5myA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer4",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 471, DateTimeKind.Local).AddTicks(8202),
                            ConcurrencyStamp = "0374ecf3-9bfc-419f-9c82-69316fb467be",
                            Email = "rawaccountcustomer5@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer5@gmail.com",
                            NormalizedUserName = "raw-account-customer5",
                            PasswordHash = "AQAAAAEAACcQAAAAEMzyUVbG96wq3sCR56coAuu+0KS8RC/YnTHXXaNrUe6pT+0A5iEplrYBQ3arI4bCIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer5",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 480, DateTimeKind.Local).AddTicks(4617),
                            ConcurrencyStamp = "1b604a1d-6881-489c-bc00-f1ea8ea1dd69",
                            Email = "rawaccountcustomer6@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer6@gmail.com",
                            NormalizedUserName = "raw-account-customer6",
                            PasswordHash = "AQAAAAEAACcQAAAAEO7Fjgdl2FjXH6Fhjm3HqazDMsbUTHF1W3ikUtkPrtnqevByFHlLw4rZs/9L1Vs4dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer6",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 488, DateTimeKind.Local).AddTicks(1516),
                            ConcurrencyStamp = "62c32711-6648-4c81-b784-1fd9c3ac2420",
                            Email = "rawaccountcustomer7@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer7@gmail.com",
                            NormalizedUserName = "raw-account-customer7",
                            PasswordHash = "AQAAAAEAACcQAAAAEJpnARaRxfTTpxj0DmGdgQb9L12HDUIUrf1s2fddHtu1kRm0NhttOKqZoVEMUdHyCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer7",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 496, DateTimeKind.Local).AddTicks(9197),
                            ConcurrencyStamp = "2a550ec4-273d-4f97-ae03-ad841b11e591",
                            Email = "rawaccountcustomer8@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer8@gmail.com",
                            NormalizedUserName = "raw-account-customer8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAGlNvSuiFr5v17K963hMt3sJ1gVpt+AzNtjkSJyl0RXGfKRBhNolIdUddbxN7AAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer8",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 504, DateTimeKind.Local).AddTicks(6471),
                            ConcurrencyStamp = "735ab7f4-a363-4e6d-94ec-25cab00ef9dd",
                            Email = "rawaccountcustomer9@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer9@gmail.com",
                            NormalizedUserName = "raw-account-customer9",
                            PasswordHash = "AQAAAAEAACcQAAAAEEyvd23SSVlC26JVeAqssgdqia+vFb87/l9ujAXBWU9gUkq1s0vP+PzyDDCFOVssSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer9",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 513, DateTimeKind.Local).AddTicks(7178),
                            ConcurrencyStamp = "a9a41f3f-7880-4178-9183-db5e0acd6566",
                            Email = "rawaccountstaff0@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff0@gmail.com",
                            NormalizedUserName = "raw-account-staff0",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwO94SkIqNR4Ql27/ryVO4jN0+RRK1sJnGN+Ib17nRHsLZL7UNEJlG2qkuBVP9ppg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff0",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 521, DateTimeKind.Local).AddTicks(4569),
                            ConcurrencyStamp = "bb59d6ba-7a8e-443f-93a6-e6cc08a9f8b7",
                            Email = "rawaccountstaff1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff1@gmail.com",
                            NormalizedUserName = "raw-account-staff1",
                            PasswordHash = "AQAAAAEAACcQAAAAEMPhxKzpOeibIsmJd8mzgZPQxoVcnYRFT0++HZ0vSEPrE/rFg03arSAZScxFH9D6QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff1",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 529, DateTimeKind.Local).AddTicks(5953),
                            ConcurrencyStamp = "a32511f0-2793-4e2f-ba72-9e482c7e5d92",
                            Email = "rawaccountstaff2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff2@gmail.com",
                            NormalizedUserName = "raw-account-staff2",
                            PasswordHash = "AQAAAAEAACcQAAAAEBD+BKLUul6nSEZVnEp6RAh2GpBN8WDg0gpmYmMKELOsUNFDu4iu2PsV5nv2D+5tpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff2",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 537, DateTimeKind.Local).AddTicks(7039),
                            ConcurrencyStamp = "79aef824-eba6-4f02-a26d-bb3ea2ab3e39",
                            Email = "rawaccountstaff3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff3@gmail.com",
                            NormalizedUserName = "raw-account-staff3",
                            PasswordHash = "AQAAAAEAACcQAAAAENIaXlrnc+MUARddbqMezJI/1HQAICOhspxJpwjQwHhhVdZiN5466+EsJ5mooGku9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff3",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 546, DateTimeKind.Local).AddTicks(7303),
                            ConcurrencyStamp = "9eef9be6-f0a9-4901-98c7-25f88846f78e",
                            Email = "rawaccountstaff4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff4@gmail.com",
                            NormalizedUserName = "raw-account-staff4",
                            PasswordHash = "AQAAAAEAACcQAAAAEFpOQg7mBICFqU/Ypn15VxWJYZj2lEs5YxfaALrocvlSMEpepkkv9E/ZiWE4CaQINw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff4",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 555, DateTimeKind.Local).AddTicks(4685),
                            ConcurrencyStamp = "3856574f-adc9-4ec4-a2cf-15d22831297d",
                            Email = "rawaccountstaff5@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff5@gmail.com",
                            NormalizedUserName = "raw-account-staff5",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7F7XhIU4mGMdkI38Id1KhXmHDylIUlLlBTXUXEMPhLvOxUagbYZ9KkU63NmIZLWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff5",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 564, DateTimeKind.Local).AddTicks(1702),
                            ConcurrencyStamp = "66d19ddb-4eb5-440a-ad86-eb0f539f8bab",
                            Email = "rawaccountstaff6@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff6@gmail.com",
                            NormalizedUserName = "raw-account-staff6",
                            PasswordHash = "AQAAAAEAACcQAAAAEHYiyVOz0FsH/sANrmlZNkGuiisCOyxQuG/dexez/f/PIsRSDGncwxV8rpNho9CNcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff6",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 572, DateTimeKind.Local).AddTicks(3743),
                            ConcurrencyStamp = "1ba2dac8-fa2f-45fd-ba46-15bd99a3525c",
                            Email = "rawaccountstaff7@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff7@gmail.com",
                            NormalizedUserName = "raw-account-staff7",
                            PasswordHash = "AQAAAAEAACcQAAAAEMqjb31Zd08lB5I3Y4RzOOJOZ1FKnKasEE+X5MwnZjHasu3c8LOYsena5f4i6uB5+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff7",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 580, DateTimeKind.Local).AddTicks(3819),
                            ConcurrencyStamp = "548df25e-6d4c-46af-9761-c40fc1112343",
                            Email = "rawaccountstaff8@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff8@gmail.com",
                            NormalizedUserName = "raw-account-staff8",
                            PasswordHash = "AQAAAAEAACcQAAAAEFIdLvc3p4ET3KOcWbbj378hyxQszwFVK5I8lgKZxiR8HSRBS+uX3kSTOXYAy815Kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff8",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 588, DateTimeKind.Local).AddTicks(7130),
                            ConcurrencyStamp = "01e83e78-1270-47d6-a7bf-8c1be3736355",
                            Email = "rawaccountstaff9@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff9@gmail.com",
                            NormalizedUserName = "raw-account-staff9",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXu88r38mu+AH1pjisteEpsu0XkbXaDgb5sz3X6BJz49uZnG0Akr+WTA5YPzt9mGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff9",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 597, DateTimeKind.Local).AddTicks(2873),
                            ConcurrencyStamp = "da4e465c-fef4-4568-ae67-8ff3cacd3db8",
                            Email = "thangnguyenquyetvlth@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAELid9pBTl14K7UycfBkyK8M/ToXIabp9W+2GZQsz6hvQYJ+G3i6CvNFQR9L/31J79g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Thang-dev",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 607, DateTimeKind.Local).AddTicks(76),
                            ConcurrencyStamp = "f4d8dd1e-adc5-49b9-9107-1857efa7b225",
                            Email = "thangnguyenquyetvlth1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth1@gmail.com",
                            NormalizedUserName = "raw-account1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEIO3TAeX4tmG2ltajyVNR1cegHxftMf9EK3jEu2BQYOYK++RxSbco2yzV+9L54zFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account1",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD712F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 615, DateTimeKind.Local).AddTicks(5296),
                            ConcurrencyStamp = "cf9c6101-cb44-4eac-82ce-45d6c851036c",
                            Email = "thangnguyenquyetvlth2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth2@gmail.com",
                            NormalizedUserName = "raw-account2",
                            PasswordHash = "AQAAAAEAACcQAAAAELns8zoJclkWXK8lRRtotpHJ4cYBVSnHsM1laHrqsvMAgPMXkq/AXUu64SLVa0Ymsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account2",
                            disable = false
                        },
                        new
                        {
                            Id = "61BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 623, DateTimeKind.Local).AddTicks(5391),
                            ConcurrencyStamp = "a7865b46-7a8d-4548-84f2-d8d835d12d19",
                            Email = "thangnguyenquyetvlth3@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth3@gmail.com",
                            NormalizedUserName = "raw-account3",
                            PasswordHash = "AQAAAAEAACcQAAAAEID3mYZ+gtOsZuIXsRzZU62JQgMp0xjnNsA6nkQwYL0zPnQad/dlkjCjyaPTG9gMMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account3",
                            disable = false
                        },
                        new
                        {
                            Id = "19BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 632, DateTimeKind.Local).AddTicks(4398),
                            ConcurrencyStamp = "d4155755-4630-41f9-8fcd-52296c5902eb",
                            Email = "thangnguyenquyetvlth4@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth4@gmail.com",
                            NormalizedUserName = "raw-account4",
                            PasswordHash = "AQAAAAEAACcQAAAAEDgVn16cfH+akAeMIxGaj5/1dbWcM8OzYeY5EsNC68lAzuc8jgK9WBXnE52tZ4+DCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account4",
                            disable = false
                        },
                        new
                        {
                            Id = "65BD710F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 641, DateTimeKind.Local).AddTicks(5605),
                            ConcurrencyStamp = "8baae519-6b56-44cd-954f-8b410dd2d61f",
                            Email = "thangnguyenquyetvlth5@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth5@gmail.com",
                            NormalizedUserName = "raw-account5",
                            PasswordHash = "AQAAAAEAACcQAAAAEKZgqd3GdVoFjAlwP/oYrAd0eZv9RHI9GJvGNptMIBdAcvWqWCiCZdccqk785P4XTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account5",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B6-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 650, DateTimeKind.Local).AddTicks(1923),
                            ConcurrencyStamp = "179e8de7-22c9-4e65-857d-9e4887f6a2e3",
                            Email = "thangnguyenquyetvlth6@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth6@gmail.com",
                            NormalizedUserName = "raw-account6",
                            PasswordHash = "AQAAAAEAACcQAAAAEPH9oqihFxPqo3kbWlriXLqShWbuV5QfcZbSTYEtxIfUzOe+dVh3lI+CHYjG5aH2lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account6",
                            disable = false
                        },
                        new
                        {
                            Id = "09BD714F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 658, DateTimeKind.Local).AddTicks(6675),
                            ConcurrencyStamp = "48aa566d-edad-459e-86a8-144d9fb2adcb",
                            Email = "thangnguyenquyetvlth7@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth7@gmail.com",
                            NormalizedUserName = "raw-account7",
                            PasswordHash = "AQAAAAEAACcQAAAAEPX4muj/cfcahaJD1CJuSsvr0R0wgUpuZnTuEYHjDbU5A2E2WyKBjw/TIy0mKS9eHA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account7",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD114F-9576-45BA-B4B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 22, 10, 6, 26, 667, DateTimeKind.Local).AddTicks(4297),
                            ConcurrencyStamp = "3b8c17df-e804-4177-aef5-f00df04a783c",
                            Email = "thangnguyenquyetvlth8@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth8@gmail.com",
                            NormalizedUserName = "raw-account8",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZRMvY/Ijpjx9Q0d+m/qrpxcS8p8fjVAMxG2ywtvd7CTDXIvvDsdvvSvMuGuEUnUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account8",
                            disable = false
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nữ",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nam",
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 4, 22, 10, 6, 26, 415, DateTimeKind.Local).AddTicks(9628),
                            Description = "Áo sơ mi nam trắng Việt Tiến",
                            Details = "Áo sơ mi nam trắng Việt Tiến",
                            Name = "Áo sơ mi nam trắng Việt Tiến",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 4, 22, 10, 6, 26, 417, DateTimeKind.Local).AddTicks(3917),
                            Description = "Áo sơ mi nữ trắng Việt Tiến",
                            Details = "Áo sơ mi nữ trắng Việt Tiến",
                            Name = "Áo sơ mi nữ trắng Việt Tiến",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2021, 4, 22, 10, 6, 26, 417, DateTimeKind.Local).AddTicks(3934),
                            Description = "Áo sơ mi nữ trắng Việt Tiến",
                            Details = "Áo sơ mi nữ trắng Việt Tiến",
                            Name = "Áo sơ mi nữ trắng Việt Tiến",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("Project.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
