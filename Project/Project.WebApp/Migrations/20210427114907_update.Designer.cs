// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data.EF;

namespace Project.WebApp.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20210427114907_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8D04DCE3-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "5102f9cb-0fe4-4f1f-a3cb-4b66f2a69867",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8D04DCE2-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "c853d22d-01a4-4b2d-90fc-348dc3e195e6",
                            Name = "editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "8D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "487c075b-8ba5-4f0e-9876-f6e3baae5ea1",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "1D04DCC2-969A-435D-BBA4-DF3F315983DC",
                            ConcurrencyStamp = "b1434f7d-342f-45e1-a9c4-12cfb727ba3a",
                            Name = "staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ClaimType = "permission",
                            ClaimValue = "manage.user",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            RoleId = "8D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            RoleId = "1D04DCC2-969A-435D-BBA4-DF3F315983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE3-969A-435D-BBA4-DF3F325983DC"
                        },
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE2-969A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastSignIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 4, 27, 18, 49, 5, 132, DateTimeKind.Local).AddTicks(6032));

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("disable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 203, DateTimeKind.Local).AddTicks(6397),
                            ConcurrencyStamp = "a08d44c7-4651-4df0-9d5d-0bf20f210e94",
                            Email = "rawaccountcustomer0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer0@gmail.com",
                            NormalizedUserName = "raw-account-customer0",
                            PasswordHash = "AQAAAAEAACcQAAAAECqnQZTFrsXrn+0kITSUe2NZr4sxaB2hFeZvShoyq1WTfSWS1xPDsM6vXFTEhXzN1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer0",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 219, DateTimeKind.Local).AddTicks(2358),
                            ConcurrencyStamp = "18374491-95ef-4995-9be7-0b4f94d381fb",
                            Email = "rawaccountcustomer1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer1@gmail.com",
                            NormalizedUserName = "raw-account-customer1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHtWQu8VCcx1HCep6m5tN8+O5/gNLXBrfX/e5Xzr3cDeF3Bijaczbx9ey2SuWuWKfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer1",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 236, DateTimeKind.Local).AddTicks(515),
                            ConcurrencyStamp = "a7236018-4fca-4bd0-80ae-e6c5d782eb47",
                            Email = "rawaccountcustomer2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer2@gmail.com",
                            NormalizedUserName = "raw-account-customer2",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2KloTe2Sbfb8GzqljpHg6GzOhZOeeIfm0T+MnHIGmItT90JF8Svt8QS+Qrea5ELw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer2",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 252, DateTimeKind.Local).AddTicks(1300),
                            ConcurrencyStamp = "17546f29-fac3-4084-914b-4eb052fd91ba",
                            Email = "rawaccountcustomer3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer3@gmail.com",
                            NormalizedUserName = "raw-account-customer3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPXb2C47Qs+V2J51W/UVxZ17vja05RwyLCY1gm7ywuO8XOLGxSXCbYPqHkV47lZiEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer3",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 268, DateTimeKind.Local).AddTicks(4179),
                            ConcurrencyStamp = "05ec70de-b317-46aa-87d0-545ea352ca47",
                            Email = "rawaccountcustomer4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer4@gmail.com",
                            NormalizedUserName = "raw-account-customer4",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeHlcInj0T+ZNcqon1tkK3aaK/AHeNUWY3DA/3wWQyy9uqruP06/zQbdz/HcNlCIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer4",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 281, DateTimeKind.Local).AddTicks(9643),
                            ConcurrencyStamp = "f81cfe7a-dfbf-405f-8887-490b3afd514d",
                            Email = "rawaccountcustomer5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer5@gmail.com",
                            NormalizedUserName = "raw-account-customer5",
                            PasswordHash = "AQAAAAEAACcQAAAAEHko6aFKMR60h5J0rqTJS1xH546hUPWYmJj2pKz09jYi0wnS0iuLi4s3LfXtkeqrjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer5",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 295, DateTimeKind.Local).AddTicks(5887),
                            ConcurrencyStamp = "c5d08247-65e1-4a35-91c7-4736b6f6473d",
                            Email = "rawaccountcustomer6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer6@gmail.com",
                            NormalizedUserName = "raw-account-customer6",
                            PasswordHash = "AQAAAAEAACcQAAAAEL0trwBr+zKalT1wgjk1qeJr5mlVUI1mnjsGXQ0MMLY78YIM6oJ6eBkpiuqA45nSsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer6",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 311, DateTimeKind.Local).AddTicks(1271),
                            ConcurrencyStamp = "e294ff53-1a2c-4ce6-826d-daae2b31439a",
                            Email = "rawaccountcustomer7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer7@gmail.com",
                            NormalizedUserName = "raw-account-customer7",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbG/DbIWCX+NuIyy5NfmJbLoiOlVlSYdpCWYInLE2jXCfxKwKzBZ8AouoKxXeCQwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer7",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 326, DateTimeKind.Local).AddTicks(8380),
                            ConcurrencyStamp = "c3d10afc-1d4d-4d96-9d51-78e0f0b95b6e",
                            Email = "rawaccountcustomer8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer8@gmail.com",
                            NormalizedUserName = "raw-account-customer8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGaD0ubA0Vc7mvDaNeewkDdon5YooyWQkEhrXqEiW3pB8dhpNilrsMtn3Gk8+AeLSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer8",
                            disable = false
                        },
                        new
                        {
                            Id = "10BD711F-9576-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 339, DateTimeKind.Local).AddTicks(2971),
                            ConcurrencyStamp = "29673292-1e0d-4cdd-89b7-b2c81f7ffada",
                            Email = "rawaccountcustomer9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountcustomer9@gmail.com",
                            NormalizedUserName = "raw-account-customer9",
                            PasswordHash = "AQAAAAEAACcQAAAAEOU1F7M3ifgXoDkHqlmMWE3KSWYNP6MJmaUp6uOmZYjMx1TvRisYxn+H2LlqfeL61A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-customer9",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9506-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 352, DateTimeKind.Local).AddTicks(3319),
                            ConcurrencyStamp = "4b751028-4cf9-44f1-9644-0b2f5c2587f3",
                            Email = "rawaccountstaff0@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff0@gmail.com",
                            NormalizedUserName = "raw-account-staff0",
                            PasswordHash = "AQAAAAEAACcQAAAAEA1soOp6yw3yeULAq+xnmLvIxPTPLXGKlAW8CQj8NX90IxYcwnn8yPpsqajPSLSXGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff0",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9516-45BA-B5B7-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 365, DateTimeKind.Local).AddTicks(6634),
                            ConcurrencyStamp = "f7ae6712-c2cc-48a6-969b-1f85c25529a1",
                            Email = "rawaccountstaff1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff1@gmail.com",
                            NormalizedUserName = "raw-account-staff1",
                            PasswordHash = "AQAAAAEAACcQAAAAEF6zF6HFX3qYj4b45shgUytTcaLjd1MaqDuQxqliIPMYu5LsUGCr4daYreCquY+VCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff1",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9526-45BA-B5B7-F00649BE02DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 378, DateTimeKind.Local).AddTicks(1211),
                            ConcurrencyStamp = "dcb8eef1-f781-4918-adf8-cea4a46c1493",
                            Email = "rawaccountstaff2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff2@gmail.com",
                            NormalizedUserName = "raw-account-staff2",
                            PasswordHash = "AQAAAAEAACcQAAAAELZ7HNIWfSgqS3CWNsxcJBe+DyTwE2KYcR+LL7OcGwGkxYS8RaaG9f6LMbLorNWYIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff2",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9536-45BA-B5B7-F00649BE03DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 388, DateTimeKind.Local).AddTicks(7128),
                            ConcurrencyStamp = "eb2a6a06-f3d5-4411-a76c-d16568d67d55",
                            Email = "rawaccountstaff3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff3@gmail.com",
                            NormalizedUserName = "raw-account-staff3",
                            PasswordHash = "AQAAAAEAACcQAAAAEPXRG/4LxhTHdxDRbj+AIVvToGnYiNAwgojGPSfuHBFcG8AAJ5mHgUCYH/ODw+bh4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff3",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9546-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 400, DateTimeKind.Local).AddTicks(4400),
                            ConcurrencyStamp = "66b8b0d7-c2f7-4c19-b368-8a2aaede40e6",
                            Email = "rawaccountstaff4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff4@gmail.com",
                            NormalizedUserName = "raw-account-staff4",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQ2vtT+kvFz4zoRCBXnqbtj0AQ3yknug5d5j3M8jmQBASi5RTgvdADo629FKBK7cQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff4",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9556-45BA-B5B7-F00649BE05DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 413, DateTimeKind.Local).AddTicks(5171),
                            ConcurrencyStamp = "4525bdc6-aa76-4599-98d9-97156a0c6d46",
                            Email = "rawaccountstaff5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff5@gmail.com",
                            NormalizedUserName = "raw-account-staff5",
                            PasswordHash = "AQAAAAEAACcQAAAAECWCUek/PiZ4oY/EmGE93+IXWA6JJvUrc4BTbaqfEsaOgUEerbI/fykiN5wzXwRc9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff5",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9566-45BA-B5B7-F00649BE06DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 423, DateTimeKind.Local).AddTicks(104),
                            ConcurrencyStamp = "54149e4c-a694-4135-910e-992fab90d831",
                            Email = "rawaccountstaff6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff6@gmail.com",
                            NormalizedUserName = "raw-account-staff6",
                            PasswordHash = "AQAAAAEAACcQAAAAEH1kmmImjKueS5qUsqk0iuvrdBT4shfbyCGvfW0OHHTp+PgVcNnPpqXMzOlq/PK6wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff6",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9576-45BA-B5B7-F00649BE07DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 436, DateTimeKind.Local).AddTicks(5932),
                            ConcurrencyStamp = "eb966244-5497-46c0-9874-e2c2f3c10e32",
                            Email = "rawaccountstaff7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff7@gmail.com",
                            NormalizedUserName = "raw-account-staff7",
                            PasswordHash = "AQAAAAEAACcQAAAAEHgmswdWByJJEriuQ6138sSv2+oycj6ojAkqBLapJ8MhySKMeWSEmWCzdTRT03N00w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff7",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9586-45BA-B5B7-F00649BE08DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 447, DateTimeKind.Local).AddTicks(577),
                            ConcurrencyStamp = "7d853fff-8c24-4338-9fba-1f140a89b727",
                            Email = "rawaccountstaff8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff8@gmail.com",
                            NormalizedUserName = "raw-account-staff8",
                            PasswordHash = "AQAAAAEAACcQAAAAEKTd6Uj9TKNbOpu7BUrYb9k+cNwV+s259xM0b0jberwjv6WY9Spjz+Wq89VvjXXQ2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff8",
                            disable = false
                        },
                        new
                        {
                            Id = "11BD711F-9596-45BA-B5B7-F00649BE09DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 459, DateTimeKind.Local).AddTicks(5321),
                            ConcurrencyStamp = "b0b01db0-5463-4487-96d6-fd4292de32a9",
                            Email = "rawaccountstaff9@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "rawaccountstaff9@gmail.com",
                            NormalizedUserName = "raw-account-staff9",
                            PasswordHash = "AQAAAAEAACcQAAAAEIZv2BWMWVb3Y0ErIny5HiGNU7936mIVNG2JVAaOdGwlP+Y9HgoX1vaeo3kGPEIeIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account-staff9",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 472, DateTimeKind.Local).AddTicks(3201),
                            ConcurrencyStamp = "ca241c81-401a-499c-93e6-9d4204337d6e",
                            Email = "thangnguyenquyetvlth@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEEWI0zRkaPmtQWN5Z3uKa24SaPTdJhRdkPwVIWBNShnCXUM9ZjsLbT1Om/vocE8sug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Thang-dev",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD711F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 485, DateTimeKind.Local).AddTicks(5921),
                            ConcurrencyStamp = "547e1805-63bb-423e-bc70-c6f16c227285",
                            Email = "thangnguyenquyetvlth1@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth1@gmail.com",
                            NormalizedUserName = "raw-account1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHfHP3ewSIsEYJYASgOxubzykL7A9A7MCygpwJEfx31IQWmn70wy1LMhOZGUSeTpoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account1",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD712F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 496, DateTimeKind.Local).AddTicks(3912),
                            ConcurrencyStamp = "1b3f9f5f-555b-41d4-99b2-590d937b33fc",
                            Email = "thangnguyenquyetvlth2@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth2@gmail.com",
                            NormalizedUserName = "raw-account2",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/EW880I6I0aMAAQorbyJ7L49bipZzntk0Ao0SScOgM8Bm+dyA5hDg3d8eMdx4uMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account2",
                            disable = false
                        },
                        new
                        {
                            Id = "61BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 509, DateTimeKind.Local).AddTicks(731),
                            ConcurrencyStamp = "514a2fe3-f5f4-4b6e-a66d-d14cb23421b4",
                            Email = "thangnguyenquyetvlth3@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth3@gmail.com",
                            NormalizedUserName = "raw-account3",
                            PasswordHash = "AQAAAAEAACcQAAAAEMZRfK6HsIkE/ejfoU6CLEqeCHlP3Wm0Oy3a5oxJ/FPB1YZA+v5SKbqfZUR4Vam+lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account3",
                            disable = false
                        },
                        new
                        {
                            Id = "19BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 522, DateTimeKind.Local).AddTicks(8164),
                            ConcurrencyStamp = "8d19d286-49d8-4f9e-9640-25e3aabbf573",
                            Email = "thangnguyenquyetvlth4@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth4@gmail.com",
                            NormalizedUserName = "raw-account4",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQSZouD8KgrLToliJJX26p4M9ZZxsYOMHde2mQVDWUdrFACb5WpR+ytl/pYy9nbdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account4",
                            disable = false
                        },
                        new
                        {
                            Id = "65BD710F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 532, DateTimeKind.Local).AddTicks(6515),
                            ConcurrencyStamp = "bd73a8d1-439f-4ef2-8835-ff73d4d80d68",
                            Email = "thangnguyenquyetvlth5@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth5@gmail.com",
                            NormalizedUserName = "raw-account5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAYMPgkFBU3dxUILKkRlM6QWS5nNdJtJnBquOMlGTrkQGo/FnItFxdGRIwpUtDz4bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account5",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B6-F00649BE01DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 544, DateTimeKind.Local).AddTicks(7160),
                            ConcurrencyStamp = "d954065e-cb2c-45ac-8aa2-62a85c98d6d3",
                            Email = "thangnguyenquyetvlth6@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth6@gmail.com",
                            NormalizedUserName = "raw-account6",
                            PasswordHash = "AQAAAAEAACcQAAAAEAp8H1qkfRBxQXcoMOQ//Rncan+VJqEnis5A07yH1UhAwQVd9TJaixU+Tr35FTx3xQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account6",
                            disable = false
                        },
                        new
                        {
                            Id = "09BD714F-9576-45BA-B5B7-F00649BE04DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 553, DateTimeKind.Local).AddTicks(5291),
                            ConcurrencyStamp = "3783ae6e-2e33-4fc1-bc60-4ddbc280802c",
                            Email = "thangnguyenquyetvlth7@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth7@gmail.com",
                            NormalizedUserName = "raw-account7",
                            PasswordHash = "AQAAAAEAACcQAAAAEGBJZXXDX2TwIeNOYGLAoP2lKzka1MzGEB6c0V5Uxxm3WSKUNkYZuhTYqqs9tRsxwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account7",
                            disable = false
                        },
                        new
                        {
                            Id = "69BD114F-9576-45BA-B4B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2021, 4, 27, 18, 49, 5, 565, DateTimeKind.Local).AddTicks(4823),
                            ConcurrencyStamp = "a8a9d853-c4b9-48b6-a60f-268bdbaf7b78",
                            Email = "thangnguyenquyetvlth8@gmail.com",
                            EmailConfirmed = true,
                            LastSignIn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "thangnguyenquyetvlth8@gmail.com",
                            NormalizedUserName = "raw-account8",
                            PasswordHash = "AQAAAAEAACcQAAAAEK5OqxAtThIAqHsjVoyUMX8XIRncuEQ0sY1mWyqn075UxR14pK5LRbV99l14D4f5gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "raw-account8",
                            disable = false
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsShowOnHome")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nữ",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = true,
                            Name = "Áo nam",
                            SortOrder = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Sản phẩm áo thời trang nam",
                            IsShowOnHome = false,
                            Name = "Áo nam",
                            SortOrder = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("sold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2021, 4, 27, 18, 49, 5, 180, DateTimeKind.Local).AddTicks(8845),
                            Description = "99% Cotton, 1% Elastane . Bền Vững Khi Giặt Máy . Skinny Ôm Sát Và Tôn Lên Những Đường Nét Quyến Rũ Của Bạn",
                            Name = "SKINNY",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2021, 4, 27, 18, 49, 5, 181, DateTimeKind.Local).AddTicks(5167),
                            Description = "100% Cotton . Sản Phẩm Mang Đậm Phong Cách Cá Tính Và Không Kém Phần Quyến Rũ. Orginal Được Thiết Kế Để Có Thể Ôm Sát Vòng Ba Và Tôn Lên Làn Da Của Bạn",
                            Name = "ORGINAL SHORT",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = -1,
                            DateCreated = new DateTime(2021, 4, 27, 18, 49, 5, 181, DateTimeKind.Local).AddTicks(5181),
                            Description = "100% Cotton . TOPS Với Thiết Kế Cạp Cao Sẽ Mang Lại Cho Bạn Cảm Giác Tự tin , Thích Hợp Để Phối Với Những Dạng Áo ONTOP cá tính",
                            Name = "TOPS",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0
                        },
                        new
                        {
                            Id = -2,
                            DateCreated = new DateTime(2021, 4, 27, 18, 49, 5, 181, DateTimeKind.Local).AddTicks(5184),
                            Description = "Vâng , Đúng Như Cái Tên Của Nó, BoyFriend Sẽ Là Người Bạn Đồng Hành Của Bạn Trong Mọi Thời Điểm Của Cuộc Sống, BOYFRIEND Được Thiết Kết Để Tạo Cho Bạn Cảm Giác Thoải Mái, Sang Trọng Và An Toàn",
                            Name = "BOYFRIEND",
                            Price = 200000m,
                            Stock = 0,
                            ViewCount = 0,
                            sold = 0
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Data.Entities.Cart", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.HasOne("Project.Data.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Project.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("Project.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.ProductInCategory", b =>
                {
                    b.HasOne("Project.Data.Entities.Category", "Category")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Data.Entities.Product", "Product")
                        .WithMany("ProductInCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Project.Data.Entities.Reviews", b =>
                {
                    b.HasOne("Project.Data.Entities.Product", "product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("Project.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Project.Data.Entities.Category", b =>
                {
                    b.Navigation("ProductInCategories");
                });

            modelBuilder.Entity("Project.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Project.Data.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductInCategories");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
